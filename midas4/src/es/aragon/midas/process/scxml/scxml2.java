////////////////////////////////////////////////////////////////////////
//
// scxml2.java
//
// This file was generated by XMLSpy 2009 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package es.aragon.midas.process.scxml;


public class scxml2 extends com.altova.xml.TypeBase
{
		public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getTypes()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_ti_altova_scxml2]); }

	public static scxml2 loadFromFile(String filename) throws Exception
	{
		return new scxml2(com.altova.xml.XmlTreeOperations.loadDocument(filename));			
	}

	public static scxml2 loadFromString(String xmlstring) throws Exception
	{
		return new scxml2(com.altova.xml.XmlTreeOperations.loadXml(xmlstring));			
	}

	public static scxml2 loadFromBinary(byte[] binary) throws Exception
	{
		return new scxml2(com.altova.xml.XmlTreeOperations.loadXmlBinary(binary));
	}

	public void saveToFile(String filename, boolean prettyPrint) throws Exception
	{
		saveToFile(filename, prettyPrint, "UTF-8", false, false);
	}
	
	public void saveToFile(String filename, boolean prettyPrint, String encoding) throws Exception
	{
		saveToFile( filename, prettyPrint, encoding, encoding.compareToIgnoreCase("UTF-16BE") == 0, encoding.compareToIgnoreCase("UTF-16") == 0 );
	}

	public void saveToFile(String filename, boolean prettyPrint, String encoding, boolean bBigEndian, boolean bBOM) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		com.altova.xml.XmlTreeOperations.saveDocument(doc, filename, encoding, bBigEndian, bBOM, prettyPrint);
	}

	public String saveToString(boolean prettyPrint) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		return com.altova.xml.XmlTreeOperations.saveXml(doc, prettyPrint);
	}

	public byte[] saveToBinary(boolean prettyPrint) throws Exception
	{
		return saveToBinary(prettyPrint, "UTF-8", false, false);
	}
	
	public byte[] saveToBinary(boolean prettyPrint, String encoding) throws Exception
	{
		return saveToBinary( prettyPrint, encoding, encoding.compareToIgnoreCase("UTF-16BE") == 0, encoding.compareToIgnoreCase("UTF-16") == 0 );
	}

	public byte[] saveToBinary(boolean prettyPrint, String encoding, boolean bBigEndian, boolean bBOM) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		return com.altova.xml.XmlTreeOperations.saveXmlBinary(doc, encoding, bBigEndian, bBOM, prettyPrint);
	}

	public static scxml2 createDocument() throws Exception
	{
		org.w3c.dom.Document doc = com.altova.xml.XmlTreeOperations.createDocument();
		return new scxml2(doc);
	}

	public void setSchemaLocation(String schemaLocation) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) node;
		if (doc.getDocumentElement() == null)
			throw new Exception("SetSchemaLocation requires a root element.");
		String namespaceuri = doc.getDocumentElement().getNamespaceURI();
		if (namespaceuri == null || namespaceuri.length() == 0)
			doc.getDocumentElement().setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "noNamespaceSchemaLocation", schemaLocation);
		else
			doc.getDocumentElement().setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation", namespaceuri + " " + schemaLocation);
	}

	
	public scxml2(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}
	
	private void instantiateMembers()
	{

		assign= new MemberElement_assign (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._assign]);
		cancel= new MemberElement_cancel (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._cancel]);
		content= new MemberElement_content (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._content]);
		data= new MemberElement_data (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._data]);
		datamodel= new MemberElement_datamodel (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._datamodel]);
		donedata= new MemberElement_donedata (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._donedata]);
		else2= new MemberElement_else2 (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._else2]);
		elseif= new MemberElement_elseif (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._elseif]);
		final2= new MemberElement_final2 (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._final2]);
		finalize= new MemberElement_finalize (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._finalize]);
		foreach= new MemberElement_foreach (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._foreach]);
		history= new MemberElement_history (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._history]);
		if2= new MemberElement_if2 (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._if2]);
		initial= new MemberElement_initial (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._initial]);
		invoke= new MemberElement_invoke (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._invoke]);
		log= new MemberElement_log (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._log]);
		onentry= new MemberElement_onentry (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._onentry]);
		onexit= new MemberElement_onexit (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._onexit]);
		parallel= new MemberElement_parallel (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._parallel]);
		param= new MemberElement_param (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._param]);
		raise= new MemberElement_raise (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._raise]);
		script= new MemberElement_script (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._script]);
		scxml3= new MemberElement_scxml3 (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._scxml3]);
		send= new MemberElement_send (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._send]);
		state= new MemberElement_state (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._state]);
		transition= new MemberElement_transition (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml2._transition]);
	}
	// Attributes


	// Elements
	
	public MemberElement_assign assign;

		public static class MemberElement_assign
		{
			public static class MemberElement_assign_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_assign member;
				public MemberElement_assign_Iterator(MemberElement_assign member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_assign_type nx = new scxml_assign_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_assign (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_assign_type at(int index) {return new scxml_assign_type(owner.getElementAt(info, index));}
			public scxml_assign_type first() {return new scxml_assign_type(owner.getElementFirst(info));}
			public scxml_assign_type last(){return new scxml_assign_type(owner.getElementLast(info));}
			public scxml_assign_type append(){return new scxml_assign_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_assign_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_cancel cancel;

		public static class MemberElement_cancel
		{
			public static class MemberElement_cancel_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_cancel member;
				public MemberElement_cancel_Iterator(MemberElement_cancel member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_cancel_type nx = new scxml_cancel_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_cancel (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_cancel_type at(int index) {return new scxml_cancel_type(owner.getElementAt(info, index));}
			public scxml_cancel_type first() {return new scxml_cancel_type(owner.getElementFirst(info));}
			public scxml_cancel_type last(){return new scxml_cancel_type(owner.getElementLast(info));}
			public scxml_cancel_type append(){return new scxml_cancel_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_cancel_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_content content;

		public static class MemberElement_content
		{
			public static class MemberElement_content_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_content member;
				public MemberElement_content_Iterator(MemberElement_content member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_content_type nx = new scxml_content_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_content (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_content_type at(int index) {return new scxml_content_type(owner.getElementAt(info, index));}
			public scxml_content_type first() {return new scxml_content_type(owner.getElementFirst(info));}
			public scxml_content_type last(){return new scxml_content_type(owner.getElementLast(info));}
			public scxml_content_type append(){return new scxml_content_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_content_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_data data;

		public static class MemberElement_data
		{
			public static class MemberElement_data_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_data member;
				public MemberElement_data_Iterator(MemberElement_data member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_data_type nx = new scxml_data_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_data (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_data_type at(int index) {return new scxml_data_type(owner.getElementAt(info, index));}
			public scxml_data_type first() {return new scxml_data_type(owner.getElementFirst(info));}
			public scxml_data_type last(){return new scxml_data_type(owner.getElementLast(info));}
			public scxml_data_type append(){return new scxml_data_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_data_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_datamodel datamodel;

		public static class MemberElement_datamodel
		{
			public static class MemberElement_datamodel_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_datamodel member;
				public MemberElement_datamodel_Iterator(MemberElement_datamodel member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_datamodel_type nx = new scxml_datamodel_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_datamodel (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_datamodel_type at(int index) {return new scxml_datamodel_type(owner.getElementAt(info, index));}
			public scxml_datamodel_type first() {return new scxml_datamodel_type(owner.getElementFirst(info));}
			public scxml_datamodel_type last(){return new scxml_datamodel_type(owner.getElementLast(info));}
			public scxml_datamodel_type append(){return new scxml_datamodel_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_datamodel_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_donedata donedata;

		public static class MemberElement_donedata
		{
			public static class MemberElement_donedata_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_donedata member;
				public MemberElement_donedata_Iterator(MemberElement_donedata member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_donedata_type nx = new scxml_donedata_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_donedata (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_donedata_type at(int index) {return new scxml_donedata_type(owner.getElementAt(info, index));}
			public scxml_donedata_type first() {return new scxml_donedata_type(owner.getElementFirst(info));}
			public scxml_donedata_type last(){return new scxml_donedata_type(owner.getElementLast(info));}
			public scxml_donedata_type append(){return new scxml_donedata_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_donedata_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_else2 else2;

		public static class MemberElement_else2
		{
			public static class MemberElement_else2_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_else2 member;
				public MemberElement_else2_Iterator(MemberElement_else2 member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_else_type nx = new scxml_else_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_else2 (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_else_type at(int index) {return new scxml_else_type(owner.getElementAt(info, index));}
			public scxml_else_type first() {return new scxml_else_type(owner.getElementFirst(info));}
			public scxml_else_type last(){return new scxml_else_type(owner.getElementLast(info));}
			public scxml_else_type append(){return new scxml_else_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_else2_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_elseif elseif;

		public static class MemberElement_elseif
		{
			public static class MemberElement_elseif_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_elseif member;
				public MemberElement_elseif_Iterator(MemberElement_elseif member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_elseif_type nx = new scxml_elseif_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_elseif (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_elseif_type at(int index) {return new scxml_elseif_type(owner.getElementAt(info, index));}
			public scxml_elseif_type first() {return new scxml_elseif_type(owner.getElementFirst(info));}
			public scxml_elseif_type last(){return new scxml_elseif_type(owner.getElementLast(info));}
			public scxml_elseif_type append(){return new scxml_elseif_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_elseif_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_final2 final2;

		public static class MemberElement_final2
		{
			public static class MemberElement_final2_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_final2 member;
				public MemberElement_final2_Iterator(MemberElement_final2 member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_final_type nx = new scxml_final_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_final2 (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_final_type at(int index) {return new scxml_final_type(owner.getElementAt(info, index));}
			public scxml_final_type first() {return new scxml_final_type(owner.getElementFirst(info));}
			public scxml_final_type last(){return new scxml_final_type(owner.getElementLast(info));}
			public scxml_final_type append(){return new scxml_final_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_final2_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_finalize finalize;

		public static class MemberElement_finalize
		{
			public static class MemberElement_finalize_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_finalize member;
				public MemberElement_finalize_Iterator(MemberElement_finalize member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_finalize_type nx = new scxml_finalize_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_finalize (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_finalize_type at(int index) {return new scxml_finalize_type(owner.getElementAt(info, index));}
			public scxml_finalize_type first() {return new scxml_finalize_type(owner.getElementFirst(info));}
			public scxml_finalize_type last(){return new scxml_finalize_type(owner.getElementLast(info));}
			public scxml_finalize_type append(){return new scxml_finalize_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_finalize_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_foreach foreach;

		public static class MemberElement_foreach
		{
			public static class MemberElement_foreach_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_foreach member;
				public MemberElement_foreach_Iterator(MemberElement_foreach member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_foreach_type nx = new scxml_foreach_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_foreach (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_foreach_type at(int index) {return new scxml_foreach_type(owner.getElementAt(info, index));}
			public scxml_foreach_type first() {return new scxml_foreach_type(owner.getElementFirst(info));}
			public scxml_foreach_type last(){return new scxml_foreach_type(owner.getElementLast(info));}
			public scxml_foreach_type append(){return new scxml_foreach_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_foreach_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_history history;

		public static class MemberElement_history
		{
			public static class MemberElement_history_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_history member;
				public MemberElement_history_Iterator(MemberElement_history member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_history_type nx = new scxml_history_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_history (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_history_type at(int index) {return new scxml_history_type(owner.getElementAt(info, index));}
			public scxml_history_type first() {return new scxml_history_type(owner.getElementFirst(info));}
			public scxml_history_type last(){return new scxml_history_type(owner.getElementLast(info));}
			public scxml_history_type append(){return new scxml_history_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_history_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_if2 if2;

		public static class MemberElement_if2
		{
			public static class MemberElement_if2_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_if2 member;
				public MemberElement_if2_Iterator(MemberElement_if2 member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_if_type nx = new scxml_if_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_if2 (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_if_type at(int index) {return new scxml_if_type(owner.getElementAt(info, index));}
			public scxml_if_type first() {return new scxml_if_type(owner.getElementFirst(info));}
			public scxml_if_type last(){return new scxml_if_type(owner.getElementLast(info));}
			public scxml_if_type append(){return new scxml_if_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_if2_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_initial initial;

		public static class MemberElement_initial
		{
			public static class MemberElement_initial_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_initial member;
				public MemberElement_initial_Iterator(MemberElement_initial member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_initial_type nx = new scxml_initial_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_initial (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_initial_type at(int index) {return new scxml_initial_type(owner.getElementAt(info, index));}
			public scxml_initial_type first() {return new scxml_initial_type(owner.getElementFirst(info));}
			public scxml_initial_type last(){return new scxml_initial_type(owner.getElementLast(info));}
			public scxml_initial_type append(){return new scxml_initial_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_initial_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_invoke invoke;

		public static class MemberElement_invoke
		{
			public static class MemberElement_invoke_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_invoke member;
				public MemberElement_invoke_Iterator(MemberElement_invoke member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_invoke_type nx = new scxml_invoke_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_invoke (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_invoke_type at(int index) {return new scxml_invoke_type(owner.getElementAt(info, index));}
			public scxml_invoke_type first() {return new scxml_invoke_type(owner.getElementFirst(info));}
			public scxml_invoke_type last(){return new scxml_invoke_type(owner.getElementLast(info));}
			public scxml_invoke_type append(){return new scxml_invoke_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_invoke_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_log log;

		public static class MemberElement_log
		{
			public static class MemberElement_log_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_log member;
				public MemberElement_log_Iterator(MemberElement_log member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_log_type nx = new scxml_log_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_log (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_log_type at(int index) {return new scxml_log_type(owner.getElementAt(info, index));}
			public scxml_log_type first() {return new scxml_log_type(owner.getElementFirst(info));}
			public scxml_log_type last(){return new scxml_log_type(owner.getElementLast(info));}
			public scxml_log_type append(){return new scxml_log_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_log_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_onentry onentry;

		public static class MemberElement_onentry
		{
			public static class MemberElement_onentry_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_onentry member;
				public MemberElement_onentry_Iterator(MemberElement_onentry member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_onentry_type nx = new scxml_onentry_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_onentry (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_onentry_type at(int index) {return new scxml_onentry_type(owner.getElementAt(info, index));}
			public scxml_onentry_type first() {return new scxml_onentry_type(owner.getElementFirst(info));}
			public scxml_onentry_type last(){return new scxml_onentry_type(owner.getElementLast(info));}
			public scxml_onentry_type append(){return new scxml_onentry_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_onentry_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_onexit onexit;

		public static class MemberElement_onexit
		{
			public static class MemberElement_onexit_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_onexit member;
				public MemberElement_onexit_Iterator(MemberElement_onexit member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_onexit_type nx = new scxml_onexit_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_onexit (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_onexit_type at(int index) {return new scxml_onexit_type(owner.getElementAt(info, index));}
			public scxml_onexit_type first() {return new scxml_onexit_type(owner.getElementFirst(info));}
			public scxml_onexit_type last(){return new scxml_onexit_type(owner.getElementLast(info));}
			public scxml_onexit_type append(){return new scxml_onexit_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_onexit_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_parallel parallel;

		public static class MemberElement_parallel
		{
			public static class MemberElement_parallel_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_parallel member;
				public MemberElement_parallel_Iterator(MemberElement_parallel member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_parallel_type nx = new scxml_parallel_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_parallel (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_parallel_type at(int index) {return new scxml_parallel_type(owner.getElementAt(info, index));}
			public scxml_parallel_type first() {return new scxml_parallel_type(owner.getElementFirst(info));}
			public scxml_parallel_type last(){return new scxml_parallel_type(owner.getElementLast(info));}
			public scxml_parallel_type append(){return new scxml_parallel_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_parallel_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_param param;

		public static class MemberElement_param
		{
			public static class MemberElement_param_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_param member;
				public MemberElement_param_Iterator(MemberElement_param member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_param_type nx = new scxml_param_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_param (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_param_type at(int index) {return new scxml_param_type(owner.getElementAt(info, index));}
			public scxml_param_type first() {return new scxml_param_type(owner.getElementFirst(info));}
			public scxml_param_type last(){return new scxml_param_type(owner.getElementLast(info));}
			public scxml_param_type append(){return new scxml_param_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_param_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_raise raise;

		public static class MemberElement_raise
		{
			public static class MemberElement_raise_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_raise member;
				public MemberElement_raise_Iterator(MemberElement_raise member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_raise_type nx = new scxml_raise_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_raise (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_raise_type at(int index) {return new scxml_raise_type(owner.getElementAt(info, index));}
			public scxml_raise_type first() {return new scxml_raise_type(owner.getElementFirst(info));}
			public scxml_raise_type last(){return new scxml_raise_type(owner.getElementLast(info));}
			public scxml_raise_type append(){return new scxml_raise_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_raise_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_script script;

		public static class MemberElement_script
		{
			public static class MemberElement_script_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_script member;
				public MemberElement_script_Iterator(MemberElement_script member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_script_type nx = new scxml_script_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_script (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_script_type at(int index) {return new scxml_script_type(owner.getElementAt(info, index));}
			public scxml_script_type first() {return new scxml_script_type(owner.getElementFirst(info));}
			public scxml_script_type last(){return new scxml_script_type(owner.getElementLast(info));}
			public scxml_script_type append(){return new scxml_script_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_script_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_scxml3 scxml3;

		public static class MemberElement_scxml3
		{
			public static class MemberElement_scxml3_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_scxml3 member;
				public MemberElement_scxml3_Iterator(MemberElement_scxml3 member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_scxml_type nx = new scxml_scxml_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_scxml3 (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_scxml_type at(int index) {return new scxml_scxml_type(owner.getElementAt(info, index));}
			public scxml_scxml_type first() {return new scxml_scxml_type(owner.getElementFirst(info));}
			public scxml_scxml_type last(){return new scxml_scxml_type(owner.getElementLast(info));}
			public scxml_scxml_type append(){return new scxml_scxml_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_scxml3_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_send send;

		public static class MemberElement_send
		{
			public static class MemberElement_send_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_send member;
				public MemberElement_send_Iterator(MemberElement_send member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_send_type nx = new scxml_send_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_send (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_send_type at(int index) {return new scxml_send_type(owner.getElementAt(info, index));}
			public scxml_send_type first() {return new scxml_send_type(owner.getElementFirst(info));}
			public scxml_send_type last(){return new scxml_send_type(owner.getElementLast(info));}
			public scxml_send_type append(){return new scxml_send_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_send_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_state state;

		public static class MemberElement_state
		{
			public static class MemberElement_state_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_state member;
				public MemberElement_state_Iterator(MemberElement_state member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_state_type nx = new scxml_state_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_state (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_state_type at(int index) {return new scxml_state_type(owner.getElementAt(info, index));}
			public scxml_state_type first() {return new scxml_state_type(owner.getElementFirst(info));}
			public scxml_state_type last(){return new scxml_state_type(owner.getElementLast(info));}
			public scxml_state_type append(){return new scxml_state_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_state_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_transition transition;

		public static class MemberElement_transition
		{
			public static class MemberElement_transition_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_transition member;
				public MemberElement_transition_Iterator(MemberElement_transition member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_transition_type nx = new scxml_transition_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_transition (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_transition_type at(int index) {return new scxml_transition_type(owner.getElementAt(info, index));}
			public scxml_transition_type first() {return new scxml_transition_type(owner.getElementFirst(info));}
			public scxml_transition_type last(){return new scxml_transition_type(owner.getElementLast(info));}
			public scxml_transition_type append(){return new scxml_transition_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_transition_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}

		public void setXsiType() {com.altova.xml.XmlTreeOperations.setAttribute(getNode(), "http://www.w3.org/2001/XMLSchema-instance", "xsi:type", "http://www.w3.org/2005/07/scxml", "scxml");}
}
