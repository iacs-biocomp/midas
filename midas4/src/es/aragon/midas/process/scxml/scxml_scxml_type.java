////////////////////////////////////////////////////////////////////////
//
// scxml_scxml_type.java
//
// This file was generated by XMLSpy 2009 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package es.aragon.midas.process.scxml;


public class scxml_scxml_type extends com.altova.xml.TypeBase
{
		public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getTypes()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_ti_altova_scxml_scxml_type]); }
	
	public scxml_scxml_type(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}
	
	private void instantiateMembers()
	{
		initial = new MemberAttribute_initial (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_scxml_type._initial]);
		name = new MemberAttribute_name (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_scxml_type._name]);
		version = new MemberAttribute_version (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_scxml_type._version]);
		datamodel = new MemberAttribute_datamodel (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_scxml_type._datamodel]);
		binding = new MemberAttribute_binding (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_scxml_type._binding]);
		exmode = new MemberAttribute_exmode (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_scxml_type._exmode]);

		state= new MemberElement_state (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_scxml_type._state]);
		parallel= new MemberElement_parallel (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_scxml_type._parallel]);
		final2= new MemberElement_final2 (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_scxml_type._final2]);
		datamodel2= new MemberElement_datamodel2 (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_scxml_type._datamodel2]);
		script= new MemberElement_script (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_scxml_type._script]);
	}
	// Attributes
	public MemberAttribute_initial initial;
		public static class MemberAttribute_initial
		{
			private com.altova.xml.TypeBase owner;
			private com.altova.typeinfo.MemberInfo info; 
			public MemberAttribute_initial (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public String getValue() {
				return (String)com.altova.xml.XmlTreeOperations.castToString(com.altova.xml.XmlTreeOperations.findAttribute(owner.getNode(), info), info);
			}
			public void setValue(String value) {
				com.altova.xml.XmlTreeOperations.setValue(owner.getNode(), info, value);		
			}
			public boolean exists() {return owner.getAttribute(info) != null;}
			public void remove() {owner.removeAttribute(info);} 
			public com.altova.xml.meta.Attribute getInfo() {return new com.altova.xml.meta.Attribute(info);}
		}
	public MemberAttribute_name name;
		public static class MemberAttribute_name
		{
			private com.altova.xml.TypeBase owner;
			private com.altova.typeinfo.MemberInfo info; 
			public MemberAttribute_name (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public String getValue() {
				return (String)com.altova.xml.XmlTreeOperations.castToString(com.altova.xml.XmlTreeOperations.findAttribute(owner.getNode(), info), info);
			}
			public void setValue(String value) {
				com.altova.xml.XmlTreeOperations.setValue(owner.getNode(), info, value);		
			}
			public boolean exists() {return owner.getAttribute(info) != null;}
			public void remove() {owner.removeAttribute(info);} 
			public com.altova.xml.meta.Attribute getInfo() {return new com.altova.xml.meta.Attribute(info);}
		}
	public MemberAttribute_version version;
		public static class MemberAttribute_version
		{
			private com.altova.xml.TypeBase owner;
			private com.altova.typeinfo.MemberInfo info; 
			public MemberAttribute_version (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public java.math.BigDecimal getValue() {
				return (java.math.BigDecimal)com.altova.xml.XmlTreeOperations.castToBigDecimal(com.altova.xml.XmlTreeOperations.findAttribute(owner.getNode(), info), info);
			}
			public void setValue(java.math.BigDecimal value) {
				com.altova.xml.XmlTreeOperations.setValue(owner.getNode(), info, value);		
			}
			public boolean exists() {return owner.getAttribute(info) != null;}
			public void remove() {owner.removeAttribute(info);} 
			public com.altova.xml.meta.Attribute getInfo() {return new com.altova.xml.meta.Attribute(info);}
		}
	public MemberAttribute_datamodel datamodel;
		public static class MemberAttribute_datamodel
		{
			private com.altova.xml.TypeBase owner;
			private com.altova.typeinfo.MemberInfo info; 
			public MemberAttribute_datamodel (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public String getValue() {
				return (String)com.altova.xml.XmlTreeOperations.castToString(com.altova.xml.XmlTreeOperations.findAttribute(owner.getNode(), info), info);
			}
			public void setValue(String value) {
				com.altova.xml.XmlTreeOperations.setValue(owner.getNode(), info, value);		
			}
			public boolean exists() {return owner.getAttribute(info) != null;}
			public void remove() {owner.removeAttribute(info);} 
			public com.altova.xml.meta.Attribute getInfo() {return new com.altova.xml.meta.Attribute(info);}
		}
	public MemberAttribute_binding binding;
		public static class MemberAttribute_binding
		{
			private com.altova.xml.TypeBase owner;
			private com.altova.typeinfo.MemberInfo info; 
			public MemberAttribute_binding (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public String getValue() {
				return (String)com.altova.xml.XmlTreeOperations.castToString(com.altova.xml.XmlTreeOperations.findAttribute(owner.getNode(), info), info);
			}
			public void setValue(String value) {
				com.altova.xml.XmlTreeOperations.setValue(owner.getNode(), info, value);		
			}
			public boolean exists() {return owner.getAttribute(info) != null;}
			public void remove() {owner.removeAttribute(info);} 
			public com.altova.xml.meta.Attribute getInfo() {return new com.altova.xml.meta.Attribute(info);}
		}
	public MemberAttribute_exmode exmode;
		public static class MemberAttribute_exmode
		{
			private com.altova.xml.TypeBase owner;
			private com.altova.typeinfo.MemberInfo info; 
			public MemberAttribute_exmode (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public String getValue() {
				return (String)com.altova.xml.XmlTreeOperations.castToString(com.altova.xml.XmlTreeOperations.findAttribute(owner.getNode(), info), info);
			}
			public void setValue(String value) {
				com.altova.xml.XmlTreeOperations.setValue(owner.getNode(), info, value);		
			}
			public boolean exists() {return owner.getAttribute(info) != null;}
			public void remove() {owner.removeAttribute(info);} 
			public com.altova.xml.meta.Attribute getInfo() {return new com.altova.xml.meta.Attribute(info);}
		}


	// Elements
	
	public MemberElement_state state;

		public static class MemberElement_state
		{
			public static class MemberElement_state_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_state member;
				public MemberElement_state_Iterator(MemberElement_state member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_state_type nx = new scxml_state_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_state (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_state_type at(int index) {return new scxml_state_type(owner.getElementAt(info, index));}
			public scxml_state_type first() {return new scxml_state_type(owner.getElementFirst(info));}
			public scxml_state_type last(){return new scxml_state_type(owner.getElementLast(info));}
			public scxml_state_type append(){return new scxml_state_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_state_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_parallel parallel;

		public static class MemberElement_parallel
		{
			public static class MemberElement_parallel_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_parallel member;
				public MemberElement_parallel_Iterator(MemberElement_parallel member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_parallel_type nx = new scxml_parallel_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_parallel (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_parallel_type at(int index) {return new scxml_parallel_type(owner.getElementAt(info, index));}
			public scxml_parallel_type first() {return new scxml_parallel_type(owner.getElementFirst(info));}
			public scxml_parallel_type last(){return new scxml_parallel_type(owner.getElementLast(info));}
			public scxml_parallel_type append(){return new scxml_parallel_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_parallel_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_final2 final2;

		public static class MemberElement_final2
		{
			public static class MemberElement_final2_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_final2 member;
				public MemberElement_final2_Iterator(MemberElement_final2 member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_final_type nx = new scxml_final_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_final2 (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_final_type at(int index) {return new scxml_final_type(owner.getElementAt(info, index));}
			public scxml_final_type first() {return new scxml_final_type(owner.getElementFirst(info));}
			public scxml_final_type last(){return new scxml_final_type(owner.getElementLast(info));}
			public scxml_final_type append(){return new scxml_final_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_final2_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_datamodel2 datamodel2;

		public static class MemberElement_datamodel2
		{
			public static class MemberElement_datamodel2_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_datamodel2 member;
				public MemberElement_datamodel2_Iterator(MemberElement_datamodel2 member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_datamodel_type nx = new scxml_datamodel_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_datamodel2 (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_datamodel_type at(int index) {return new scxml_datamodel_type(owner.getElementAt(info, index));}
			public scxml_datamodel_type first() {return new scxml_datamodel_type(owner.getElementFirst(info));}
			public scxml_datamodel_type last(){return new scxml_datamodel_type(owner.getElementLast(info));}
			public scxml_datamodel_type append(){return new scxml_datamodel_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_datamodel2_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_script script;

		public static class MemberElement_script
		{
			public static class MemberElement_script_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_script member;
				public MemberElement_script_Iterator(MemberElement_script member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_script_type nx = new scxml_script_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_script (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_script_type at(int index) {return new scxml_script_type(owner.getElementAt(info, index));}
			public scxml_script_type first() {return new scxml_script_type(owner.getElementFirst(info));}
			public scxml_script_type last(){return new scxml_script_type(owner.getElementLast(info));}
			public scxml_script_type append(){return new scxml_script_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_script_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}

		public void setXsiType() {com.altova.xml.XmlTreeOperations.setAttribute(getNode(), "http://www.w3.org/2001/XMLSchema-instance", "xsi:type", "http://www.w3.org/2005/07/scxml", "scxml.scxml.type");}
}
