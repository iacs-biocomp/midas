////////////////////////////////////////////////////////////////////////
//
// scxml_finalize_type.java
//
// This file was generated by XMLSpy 2009 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package es.aragon.midas.process.scxml;


public class scxml_finalize_type extends com.altova.xml.TypeBase
{
		public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getTypes()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_ti_altova_scxml_finalize_type]); }
	
	public scxml_finalize_type(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}
	
	private void instantiateMembers()
	{

		raise= new MemberElement_raise (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_finalize_type._raise]);
		if2= new MemberElement_if2 (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_finalize_type._if2]);
		foreach= new MemberElement_foreach (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_finalize_type._foreach]);
		send= new MemberElement_send (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_finalize_type._send]);
		script= new MemberElement_script (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_finalize_type._script]);
		assign= new MemberElement_assign (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_finalize_type._assign]);
		log= new MemberElement_log (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_finalize_type._log]);
		cancel= new MemberElement_cancel (this, es.aragon.midas.process.scxml.scxml_TypeInfo.binder.getMembers()[es.aragon.midas.process.scxml.scxml_TypeInfo._altova_mi_altova_scxml_finalize_type._cancel]);
	}
	// Attributes


	// Elements
	
	public MemberElement_raise raise;

		public static class MemberElement_raise
		{
			public static class MemberElement_raise_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_raise member;
				public MemberElement_raise_Iterator(MemberElement_raise member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_raise_type nx = new scxml_raise_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_raise (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_raise_type at(int index) {return new scxml_raise_type(owner.getElementAt(info, index));}
			public scxml_raise_type first() {return new scxml_raise_type(owner.getElementFirst(info));}
			public scxml_raise_type last(){return new scxml_raise_type(owner.getElementLast(info));}
			public scxml_raise_type append(){return new scxml_raise_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_raise_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_if2 if2;

		public static class MemberElement_if2
		{
			public static class MemberElement_if2_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_if2 member;
				public MemberElement_if2_Iterator(MemberElement_if2 member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_if_type nx = new scxml_if_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_if2 (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_if_type at(int index) {return new scxml_if_type(owner.getElementAt(info, index));}
			public scxml_if_type first() {return new scxml_if_type(owner.getElementFirst(info));}
			public scxml_if_type last(){return new scxml_if_type(owner.getElementLast(info));}
			public scxml_if_type append(){return new scxml_if_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_if2_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_foreach foreach;

		public static class MemberElement_foreach
		{
			public static class MemberElement_foreach_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_foreach member;
				public MemberElement_foreach_Iterator(MemberElement_foreach member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_foreach_type nx = new scxml_foreach_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_foreach (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_foreach_type at(int index) {return new scxml_foreach_type(owner.getElementAt(info, index));}
			public scxml_foreach_type first() {return new scxml_foreach_type(owner.getElementFirst(info));}
			public scxml_foreach_type last(){return new scxml_foreach_type(owner.getElementLast(info));}
			public scxml_foreach_type append(){return new scxml_foreach_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_foreach_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_send send;

		public static class MemberElement_send
		{
			public static class MemberElement_send_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_send member;
				public MemberElement_send_Iterator(MemberElement_send member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_send_type nx = new scxml_send_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_send (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_send_type at(int index) {return new scxml_send_type(owner.getElementAt(info, index));}
			public scxml_send_type first() {return new scxml_send_type(owner.getElementFirst(info));}
			public scxml_send_type last(){return new scxml_send_type(owner.getElementLast(info));}
			public scxml_send_type append(){return new scxml_send_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_send_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_script script;

		public static class MemberElement_script
		{
			public static class MemberElement_script_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_script member;
				public MemberElement_script_Iterator(MemberElement_script member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_script_type nx = new scxml_script_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_script (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_script_type at(int index) {return new scxml_script_type(owner.getElementAt(info, index));}
			public scxml_script_type first() {return new scxml_script_type(owner.getElementFirst(info));}
			public scxml_script_type last(){return new scxml_script_type(owner.getElementLast(info));}
			public scxml_script_type append(){return new scxml_script_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_script_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_assign assign;

		public static class MemberElement_assign
		{
			public static class MemberElement_assign_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_assign member;
				public MemberElement_assign_Iterator(MemberElement_assign member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_assign_type nx = new scxml_assign_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_assign (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_assign_type at(int index) {return new scxml_assign_type(owner.getElementAt(info, index));}
			public scxml_assign_type first() {return new scxml_assign_type(owner.getElementFirst(info));}
			public scxml_assign_type last(){return new scxml_assign_type(owner.getElementLast(info));}
			public scxml_assign_type append(){return new scxml_assign_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_assign_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_log log;

		public static class MemberElement_log
		{
			public static class MemberElement_log_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_log member;
				public MemberElement_log_Iterator(MemberElement_log member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_log_type nx = new scxml_log_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_log (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_log_type at(int index) {return new scxml_log_type(owner.getElementAt(info, index));}
			public scxml_log_type first() {return new scxml_log_type(owner.getElementFirst(info));}
			public scxml_log_type last(){return new scxml_log_type(owner.getElementLast(info));}
			public scxml_log_type append(){return new scxml_log_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_log_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_cancel cancel;

		public static class MemberElement_cancel
		{
			public static class MemberElement_cancel_Iterator implements java.util.Iterator<Object>
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_cancel member;
				public MemberElement_cancel_Iterator(MemberElement_cancel member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					scxml_cancel_type nx = new scxml_cancel_type(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_cancel (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public scxml_cancel_type at(int index) {return new scxml_cancel_type(owner.getElementAt(info, index));}
			public scxml_cancel_type first() {return new scxml_cancel_type(owner.getElementFirst(info));}
			public scxml_cancel_type last(){return new scxml_cancel_type(owner.getElementLast(info));}
			public scxml_cancel_type append(){return new scxml_cancel_type(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator<Object> iterator() {return new MemberElement_cancel_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}

		public void setXsiType() {com.altova.xml.XmlTreeOperations.setAttribute(getNode(), "http://www.w3.org/2001/XMLSchema-instance", "xsi:type", "http://www.w3.org/2005/07/scxml", "scxml.finalize.type");}
}
